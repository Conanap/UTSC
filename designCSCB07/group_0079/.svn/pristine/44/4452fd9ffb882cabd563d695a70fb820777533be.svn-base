package driver;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Parses raw html strings for desired information. Specifically author name,
 * number of citations, number of i10 since 2009, first 3 publications
 * total number of citations for the first 5 publications, number of coauthors
 * for each article, and a list of all the coauthors for all articles.
 * @author Albion Ka Hei Fung
 *
 */
public class ContextParser {
  private ArrayList<String> coauthors;
  private String html;
  
  private String citPattern = "<td .*?>([0-9]+?)</td>";
  private String authorPat = "<span id=\"cit-name-display\" class=\"" +
      "cit-in-place-nohover\">(.*?)</span>";
  private String citDetailPat = "<table class=\"cit-table\">.*?</table>";
  private String tdPat = "<tr class=\"cit-table item\">" +
      "<td id=\"col-title\"><a href=.*?>(.*?)</a>";
  private String tdNumPat = "<td id=\"col-citedby\"><a.*?>([0-9]+?)</a>";
  private String coauthPat = "<a class=\"cit-dark-link\".*?>(.*?)</a>";
  
  /**
   * Constructor for a context parser
   */
  public ContextParser() {
    this.coauthors = new ArrayList<String>();
  }
  
  public ContextParser(String html) {
    this.coauthors= new ArrayList<String>();
    this.html = html;
  }
  
  /**
   * get the author / name of person on profile
   * @return name of author
   */
  private String getAuthor() {
    String author;
    String sec = this.extractSection("cit-user-info(.*?)</html>");
    Pattern pattern = Pattern.compile(this.authorPat);
    Matcher match = pattern.matcher(sec);
    if(!match.find())
      return "Author name not found";
    author = match.group(1);
    return author;
  }
  
  /**
   * get the total number of citations
   * @return a string representation of number of citations
   */
  private String getNumberCitations() {
    String number;
    String sec = this.extractSection("Citation indices.*?</html>");
    Pattern pattern = Pattern.compile(this.citPattern);
    Matcher match = pattern.matcher(sec);
    if(!match.find())
      return "Number of citations not found";
    number = match.group(1);
    return number;
  }
  
  /**
   * get the total number of i10 index since 2009
   * @return a string representation of i10 since 2009
   */
  private String getNumberi10Index() {
    Pattern pattern = Pattern.compile(this.citPattern);
    Matcher match = pattern.matcher(this.html);
    String i10num;
    for (int i = 0; i < 5; i++)
      match.find();
    if(!match.find())
      return "i10 not found";
    i10num = match.group(1);
    return i10num;
  }
  
  /**
   * get the name of the first 3 publications
   * @return String of 3 publication titles separated by \\n
   */
  private String getFirstThreePublication() {
    String tbl = this.extractSection(this.citDetailPat);
    String td = this.tdPat;
    String pubs ="";
    Pattern pattern = Pattern.compile(td);
    Matcher match = pattern.matcher(tbl);
    for(int i = 0; i < 3 && match.find(); i++) {
      pubs += match.group(1);
      pubs += "\n";
    }
    return pubs;
  }
  
  /**
   * get the total number of citations for the first 5 publications
   * @return String representation for number of citations
   */
  private String getNumPublicationFirstFive() {
    String tbl = this.extractSection(this.citDetailPat);
    Pattern pattern = Pattern.compile(this.tdNumPat);
    Matcher match = pattern.matcher(tbl);
    String ret = "";
    int tot = 0;
    for(int i = 0; i < 5 && match.find(); i++) {
      tot += Integer.parseInt(match.group(1));
    }
    ret += tot;
    return ret;
  }
  
  /**
   * The the total number of coauthors for the specific author page.
   * @return String representation of number of coauthors
   */
  private String getNumCoauthor() {
    String sec = this.extractSection("Co-authors.*?View all co-authors");
    Pattern pattern = Pattern.compile(this.coauthPat);
    Matcher match = pattern.matcher(sec);
    int coauthNum = 0;
    while(match.find()) {
      if(!this.coauthors.contains(match.group(1)) &&
          !match.group(1).equals("View all co-authors")) {
       this.coauthors.add(match.group(1));
       coauthNum ++;
      }
    }
    return "" + coauthNum;
  }
  
  /**
   * The function extracts a specific section of a string and returns that
   * section. This makes looking for specific lines easier
   * @param pat The pattern of the section which you want to extract. Regex.
   * @return The section that matches the regex.
   */
  private String extractSection(String pat) {
    Pattern pattern = Pattern.compile(pat);
    Matcher match = pattern.matcher(this.html);
    if(!match.find())
      return "";
    return this.html.substring(match.start(), match.end());
  }

  /**
   * get all the coauthors of all the articles. Unsorted.
   * @return An arraylist of strings of coauthor names
   */
  public ArrayList<String> getCoauthors() {
    return this.coauthors;
  }
  
  /**
   * parses all of the context into an array of string from an string formatted
   * as a html site.
   * @param html The String formatted as html webpage
   * @return A list of information extracted from the string
   */
  public String[] parseContext(String html) {
    String out[] = new String[6];
    this.html = html;
    out[0] = this.getAuthor();
    out[1] = this.getNumberCitations();
    out[2] = this.getNumberi10Index();
    out[3] = this.getFirstThreePublication();
    out[4] = this.getNumPublicationFirstFive();
    out[5] = this.getNumCoauthor();
    return out;
  }
}
