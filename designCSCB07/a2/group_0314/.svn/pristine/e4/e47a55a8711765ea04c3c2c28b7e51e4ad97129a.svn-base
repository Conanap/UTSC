// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: fungalbi
// UT Student #: 1002444321
// Author: Albion Ka Hei Fung
//
// Student2:
// UTORID user_name:
// UT Student #:
// Author: Brody Chen
//
// Student3:
// UTORID user_name: lawchi1
// UT Student #: 1002470444
// Author: Chi Fai Law
//
// Student4:
// UTORID user_name: moha1075
// UT Student #: 1002307434
// Author: Rizadh Mohamed Nizam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************


public class JShell {
  private static boolean exit;
  private static FileSystem fs = new FileSystem();
  private static Directory curr;

  public static void main(String[] args) {
    exit = false;
    curr = fs.getRoot();
    while (!exit) {
      System.out.print("JVM: ~User$ ");
      System.out.print(runCmd(Input.getInput(), curr));
    }
    // reset for next run
    // exit = false;
  }

  private static void exit() {
    exit = true;
  }

  private static String runCmd(String[] tokens, Directory current) {
    String out = "";
    int status = 0;
    Directory temp;

    if (!Validator.validateTokens(tokens))
      return Man.getUsage(tokens[0]);
    else {
      switch (tokens[0]) {
        case "exit":
          exit();
          break;
        case "echo":
          if (tokens.length == 2)
            out = Echo.echo(tokens[1]);
          else if (tokens.length == 4) {            if (tokens[2].equals(">"))
              Overwrite.overwrite(Echo.echo(tokens[1]), tokens[3], fs, current);
            else
              Append.append(Echo.echo(tokens[1]), tokens[3], fs, current);
          }
          break;
        case "mkdir":
          int i = 1;
          while (i < tokens.length && status == 0)
          {
            temp = Cd.changeDir(tokens[i], fs, current);
            if(temp != null)
              status = MkDir.mkdir(tokens[i], fs, temp);
            else
              status = MkDir.mkdir(tokens[i], fs, current);
            i++;
          }
          if(status == 0)
            out += "Path not found: " + FileSystem.parseFilePath(tokens[--i])[0] + "\n";
          break;
        case "cd":
          curr = Cd.changeDir(tokens[1], fs, current);
          break;
        case "ls":
          if (tokens.length == 1)
            out += Ls.listContents(current);
          for (i = 1; i < tokens.length; i++)
            out += Ls.listContents(tokens[i], fs, current);
          break;
        case "cat":
          out = Cat.cat(tokens, fs, current);
          break;
        case "pushd":
          Pushd.pushd(fs, current);
          break;
        case "popd":
          Popd.popd(fs, current);
          break;
        case "history":
          // History.history(tokens[1]);
          out += "";
          break;
        case "man":
          out = Man.getDocumentation(tokens[1]);
          break;
        case "pwd":
          out = Pwd.printWorkingDirectory(current);
          break;
        default:
          out = "-jshell: " + tokens[0] + ": command not found\n";
          break;
      }
    }
    return out;
  }
}
