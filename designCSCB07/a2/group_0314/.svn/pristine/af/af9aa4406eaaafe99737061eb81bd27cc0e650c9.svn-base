package command;

import java.util.Map;
import java.util.regex.Pattern;

import driver.CommandRunner;
import driver.Output;
import filesystem.*;

public class Grep extends Command{

  private boolean recurr = false;
  private FileSystem fsRef;
  private Directory currDir;
  @Override
  public void initialize(Directory curr, FileSystem fs, History his) {
    this.fsRef = fs;
    this.currDir = curr;
    
  }

  @Override
  public void execute(String[] tokens, CommandRunner cmd, Output output) {
    if (validate(tokens)){
      // -R supplied, go to directory
      if (recurr){
        output.sendOutBuffer(grepDir(tokens[2], 
            fsRef.getDirectory(tokens[2], currDir)));
      // -R not supplied
      } else {
        output.sendOutBuffer(grep(tokens[1],
            fsRef.getFile(tokens[1], currDir)));
      }
    }
  }

  @Override
  public boolean validate(String[] tokens) {
    if (tokens[0] == "grep") {
      if (tokens[1] == "-r") {
        recurr = true;
      }
      return true;
    }
    return false;
  }

  @Override
  public String getManual() {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public String getUsage() {
    // TODO Auto-generated method stub
    return null;
  }
  
  /**
   * Method used to search through file to find lines in file at path
   * matching a regular expression.
   * @param regex regular expression being search for
   * @param path path where the file is located
   * @param file the file itself
   * @return all lines that match regex
   */
  public static String grep (String regex, String path, File file){
    String matches = "";
    String[] lines = file.getContent().split("\n");
    for (String line : lines) {
      if (Pattern.matches(regex, line)){
        matches = matches + path + ":" + line + "\n";
      }
    }
    return matches;
  }
  
  public static String grep (String regex, File file){
    return grep(regex, "", file);
  }
  
  /**
   * Method used to search all files in directory provided as well as all
   * subdirectories for lines matching regex
   * @param regex regular expression to be matched
   * @param currDir current directory
   * @return all lines matching regex in current and sub directories
   */
  public static String grepDir (String regex, Directory currDir) {
    if (currDir.getFileContainer().isEmpty()) {
      return "";
    }
    else {
      String outStr = "";
      // grep all files in current directory
      Map<String, File> files = currDir.getFileContainer();
      for (Map.Entry<String, File> file : files.entrySet()) {
        String path = currDir.getPath() + "/" + file.getKey();
        outStr = outStr + grep(regex, path, file.getValue());
      }
      // check sub-directories
      Map<String, Directory> subDirs = currDir.getDirContainer();
      for (Map.Entry<String, Directory> subDir : subDirs.entrySet()) {
        outStr = outStr + grepDir(regex, subDir.getValue());
      }
      return outStr;
    }
  }
}
