// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: fungalbi
// UT Student #: 1002444321
// Author: Albion Ka Hei Fung
//
// Student2:
// UTORID user_name:
// UT Student #:
// Author: Brody Chen
//
// Student3:
// UTORID user_name:
// UT Student #:
// Author: Chi Fai Law
//
// Student4:
// UTORID user_name: moha1075
// UT Student #: 1002307434
// Author: Rizadh Mohamed Nizam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

 
import java.util.Stack;
import java.util.ArrayList;

public class JShell {
  private static String output;
  private static boolean exit = false;
  private static Directory curr = new Directory();
  private static Stack dirStack = new Stack();
  // private static Stack hisStack = new Stack();

  public static void main(String[] args) {
    // uncomment when ready
    // FileSystem file_sys = new FileSystem();
    String[] tokens;
    boolean valid = false;
    cmdInit();
    while (!exit) {
      System.out.print("JVM: ~Root$ ");
      tokens = Input.getInput(input);
      // validate input
      if(valid) {
        output = runCmd(tokens);
        if (output.length() > 0)
          System.out.print(output);
      } else {
        output = errorMsg(tokens);
      }
    }
    // reset for next run
    // exit = false;
    scan.close();
  }

  private static void exit() {
    exit = true;
  }

  private static String parseInput(String input) {
    String[] tokens = tokenizeInput(input);
    return tokens;
  }

  private static String stdOut(String[] tokens) {
    String out = "";
    switch (tokens[0]) {
      case "exit":
        //if (tokens.length == 1) {
        exit();
        //} else {
        //out = "usage: exit\n";
        //}
        break;
      case "echo":
        if(!valid)
          out = "usage: echo STRING [>, >>: FILE]\n";
        else {
          if(tokens.length == 2)
            out = Echo.echo(tokens[1]);
          else if(tokens.length == 4) {
            if(tokens[2] == ">")
              // overwrite
            else if(tokens[2] == ">>")
              // append
          }
        }
        break;

      case "mkdir":
        if (!valid)
          out = "usage: mkdir DIR ...\n";
        else {
          for (int i = 1; i < tokens.length; i++)
            // Mkdir.mkdir(tokens[i]);
        }
        break;

      case "cd":
        if (!valid)
          out = "usage: cd DIR\n";
        else
          // Cd.cd(tokens[1], curr);
        break;

      case "ls":
        if (!valid)
          out = "usage: ls\n";
        else {
          for (int i = 1; i < tokens.length; i++)
            // Ls.ls(curr);
        }
        break;

      case "cat":
        if (!valid)
          out = "usage: cat FILE ...\n";
        else {
          for (int i = 1; i < tokens.length; i++)
            Cat.cat(tokens[i], curr);
        break;

      case "pushd":
        if (!valid)
          out = "usage: pushd DIR\n";
        else
          //Pushd.pushd(dirStack);
        break;

      case "popd":
        if (!valid)
          out = "usage: popd\n";
        else
          // Cd.cd(Popd.popd(dirStack));
        break;

      case "history":
        if (!valid)
          out = "usage: history [NUMBER]\n";
        else
          // History.history(tokens[1]);
        break;

      case "man":
        if (!valid)
          out = "usage: man COMMAND\n";
        else
          // Man.man(tokens[1]);
        break;

      default:
        out = "-jshell: " + tokens[0] + ": command not found\n";
        break;
    }

    return out;
  }
}
