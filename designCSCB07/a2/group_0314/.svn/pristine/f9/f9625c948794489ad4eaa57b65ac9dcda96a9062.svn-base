package command;

import java.util.Iterator;
import java.util.Map;

import filesystem.*;
import driver.*;
import driver.Output;

public class Ls implements Command {

  private FileSystem fsRef;
  private Directory currDir;
  private boolean recurr = false;
  
  public Ls() {}
  
  @Override
  public void initialize(Directory curr, FileSystem fs, History his) {
    fsRef = fs;
    currDir = curr;
  }

  @Override
  public void execute(String[] tokens, CommandRunner cmd, Output output) {
    if (this.validate(tokens)){
      String outStr = "";
      if (recurr) {
        for (String token : tokens) {
          if (token == tokens[0]){continue;}
          outStr = outStr + listContentsR(token, this.fsRef, currDir, output)+ 
              "\n";
        }
      } else {
        for (String token : tokens) {
          if (token == tokens[0]){continue;}
          outStr = outStr + listContents(token, this.fsRef, currDir, output)+ 
              "\n";
        }
      }
      output.sendOutBuffer(outStr);
    } else {
      output.sendErrBuffer("");
    }
  }

  @Override
  public boolean validate(String[] tokens) {
    if (tokens[0] == "ls") {
      if (tokens[1] == "-r") {
        this.recurr = true;
      }
      return true;
    }
    return false;
  }

  @Override
  public String getManual() {
    return "List the contents of the specified directories.";
  }

  @Override
  public String getUsage() {
    return "ls [-R] [PATH ...]";
  }

  /**
   * Given a Directory return list of content in directory
   *
   * @param Directory currDir
   * @return String outStr
   */
  public static String listContents(Directory currDir) {
    String outStr = "";
    // get directories
    Iterator<?> dirIt = currDir.listDirectories().iterator();
    while (dirIt.hasNext()) {
      outStr = outStr + (String) dirIt.next() + "\n";
    }
    // get files
    Iterator<?> fileIt = currDir.listFiles().iterator();
    while (fileIt.hasNext()) {
      outStr = outStr + (String) fileIt.next() + "\n";
    }
    return outStr;
  }
  
  public static String listFile(File file) {
    return file.getName();
  }

  /**
   * Given current Directory and a path. return list of content in directory at
   * path
   *
   * @param String path
   * @param Directory currDir
   * @return String outStr
   */
  public static String listContents(String path, FileSystem fs,
      Directory currDir, Output output) {
    String outStr = "";
    try {
      currDir = fs.getDirectory(path, currDir);
      if (currDir != null) {
        outStr = listContents(currDir);
      } else {
        File file = fs.getFile(path, currDir);
        outStr = listFile(file);
      }
    } catch (NullPointerException e) {
      output.sendErrBuffer(path + ": No such file or directory\n");
    }
    return outStr;
  }

  public static String listContentsR(Directory currDir) {
    if (currDir.getDirContainer().isEmpty()) {
      return listContents(currDir);
    } else {
      String outStr = listContents(currDir);
      Map<String, Directory> subDirs = currDir.getDirContainer();
      for (Map.Entry<String, Directory> subDir : subDirs.entrySet()) {
        outStr = outStr + listContentsR(subDir.getValue());
      }
      return outStr;
    }
  }

  public static String listContentsR(String path, FileSystem fs,
      Directory currDir, Output output) {
    String outStr = "";
    try {
      currDir = fs.getDirectory(path, currDir);
      if (currDir != null) {
        outStr = listContentsR(currDir);
      }
    } catch (NullPointerException e) {
      output.sendErrBuffer(path + ": No such file or directory\n");
    }
    return outStr;
  }
}
