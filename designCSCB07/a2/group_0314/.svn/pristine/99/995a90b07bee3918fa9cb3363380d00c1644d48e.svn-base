package command;

import java.util.Arrays;
import driver.Tokenizer;
import filesystem.*;
import driver.CommandRunner;
/**
 * This represents a file related command that redirects a command to a file. If
 * not found, a new file is created.
 *
 * @author Law Chi Fai
 */
public class Redirect implements Command{

  /**
   * Checks whether the file exists. If so, checks whether command is "ap" or
   * "ow", and redirects command to said file. Else (i.e. file DNE), creates a
   * new file.
   * 
   * @param cmd the String of the input command
   * @param content the String representing the content to be redirected.
   * @param filename the String representing the name of the file input
   * @param fs The file system in which the current instance is running.
   * @param curr The current directory that the current instance is in
   */
  
  private FileSystem fs;
  private Directory curr;
  private History history;
  private String type;
  
  public void execute(String[] tokens, CommandRunner cmd, Output output){
    String filename = tokens[tokens.length()-1];
    if (fs.getFile(filename, curr) != null) {
      // Command is Append
      if (type == "ap") {
        fs.getFile(filename, curr).appendToContent(output.getOutBuffer());
      }
      // Command is Overwrite
      else if (type == "ow") {
        fs.getFile(filename, curr).setContent(output.getOutBuffer());
      }
    }
    // File name does not exist.
    else {
      String[] paths = Tokenizer.parseFilePath(filename);
      if (paths[1] != null)
        curr = fs.getDirectory(paths[0], curr);
      else
        paths[1] = paths[0];
      if (curr != null) {
        if ((paths[1].equals(".") || paths[1].equals(".."))) {
          output.sendErrBuffer("2?");
        }
        File file = new File();
        file.setContent(output.getOutBuffer());
        curr.addFile(file, paths[1]);
      }
    }
    output.sendErrBuffer("1?");
  }
  
  public void initialize(Directory curr, Filesystem fs, History his) {
    this.fs = fs;
    this.curr = curr;
    this.history = history;
  }
  
  public boolean validate(String[] tokens[]) {
    String cmd = tokens[tokens.length() - 2];
    return (cmd.equals(">") || cmd.equals(">>"));
  }
  
  public String getManual() {
    return "";
  }
  
  public String getUsage() {
    return "";
  }
  
  public void setType(String type){
    this.type = type;
  }
  
}
