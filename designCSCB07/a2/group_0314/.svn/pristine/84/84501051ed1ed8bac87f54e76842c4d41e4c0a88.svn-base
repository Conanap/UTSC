package command;

import java.lang.Integer;
import filesystem.*;
import driver.CommandRunner;
import driver.Tokenizer;
import driver.Output;

public class RunHistory extends Command {
	private Directory curr;
	private FileSystem fs;
	private History history;
	private CommandRunner cmd;
	private Output output;
	private final String MAN_DESCRIPTION = "Run the num'th command in history." + 
		" num must be a valid number and non negative";
	private final String MAN_USAGE = "!POSITIVE_INTEGER_NON_ZERO_NUMBER";

	private void runHis(String tokens) {
		Integer num;
		try {
			num = this.getNum(tokens);
		} catch (NumberFormatException e) { // unecessary catch, but java wants me to
			return;
		}
		String rcmd = history.getHistory((int)num, (int)num);
		rcmd = rcmd.substring(3, rcmd.length() - 1); // remove \n
		// check for null history
		if(!rcmd.substring(rcmd.length() - 4, rcmd.length()).equals("null")) {
			String cmds[] = Tokenizer.tokenizeInput(rcmd);
			cmd.execute(cmds, this.curr, this.history, this.output);
		} else
			output.sendErrBuffer("Command number " + num + " does not exist\n");
	}

	public void execute(String[] tokens, CommandRunner cmd, Output output) {
		this.cmd = cmd;
		this.output = output;
		this.runHis(tokens[0]);
	}

	public void initialize(Directory curr, FileSystem fs, History his) {
		this.curr = curr;
		this. fs = fs;
		this. history = his;
	}

	public boolean validate(String[] tokens) {
		boolean test = (tokens.length == 2);
		Integer tnum;
		if(test) {
			try {
				tnum = this.getNum(tokens[1]);
			} catch (NumberFormatException e) {
			return false;
			}
			test = ((int)tnum > 0);
		}
		return test;
	}

	public String getManual() {
		return Man.formatManual(MAN_USAGE, MAN_DESCRIPTION);
	}

	public String getUsage() {
		return Man.formatUsage(MAN_USAGE);
	}

	private Integer getNum(String cmd) throws NumberFormatException{
		cmd = cmd.substring(1, cmd.length());
		return Integer.parseInt(cmd);
	}
}
