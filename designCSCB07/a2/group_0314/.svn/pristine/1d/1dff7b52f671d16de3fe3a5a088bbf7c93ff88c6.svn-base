import java.util.HashMap;
import java.util.Map;

public class Man {
  private static Map<String, String> usageMessages;
  private static Map<String, String> descriptions;

  static {
    usageMessages = new HashMap<String, String>();
    descriptions = new HashMap<String, String>();

    usageMessages.put("exit", "exit");
    descriptions.put("exit", "Exits JShell.");

    usageMessages.put("echo", "echo FILE1 [> FILE | >> FILE]");
    descriptions.put("echo", "Prints the provided string.\n> Write string " +
            "into a file\n>> Appends string to a file");

    usageMessages.put("cat", "cat FILE1 [FILE2 ...]");
    descriptions.put("cat", "View the contents of provided files.");

    usageMessages.put("man", "man COMMAND");
    descriptions.put("man", "Print documentation for a given command.");

    usageMessages.put("ls", "ls [PATH ...]");
    descriptions.put("ls", "List the contents of the specified directories.");

    usageMessages.put("pwd", "pwd");
    descriptions.put("pwd", "Print the current working directory.");

    usageMessages.put("popd", "popd");
    descriptions.put("popd", "Remove top directory from the directory stack " +
          "and change current directory into it");

    usageMessages.put("pushd", "pushd DIR");
    descriptions.put("pushd", "Save the current directory into the directory" +
          " stack and change current directory to the provided directory");

    usageMessages.put("history", "history [NUMBER]");
    descriptions.put("history", "List recent commands. If provided a number," +
          " limit the number of listed commands to that number.");

    usageMessages.put("mkdir", "mkdir DIR ...");
    descriptions.put("mkdir", "Create directories for each provided name.");
  }

  /*
    Below is an example of how to do your man pages and usage messages!

    ----------------------------------------------------------------------------------------
    |                                                                                      |
    |   descriptions.put("echo", echoManPages);                                            |
    |   usageMessages.put("echo", echoUsage);                                              |
    |                                                                                      |
    ----------------------------------------------------------------------------------------

    echoUsage being something that looks like the following line:

    command ARGUMENT1 ARGUMENT2 [OPTIONAL_ARGUMENT]

    and echoManPages being a brief description of the command, approximately two lines.

  */

  public static String getDocumentation(String commandName) {
    if (descriptions.containsKey(commandName) && usageMessages.containsKey(commandName)) {
      String documentation = "";
      documentation += descriptions.get(commandName);
      documentation += "\n\n";
      documentation += "$ " + usageMessages.get(commandName);
      documentation += "\n";
      return documentation;
    } else {
      return "No man page found for \"" + commandName + "\"\n";
    }
  }

  public static String getUsage(String commandName) {
    if (usageMessages.containsKey(commandName))
      return "usage: " + usageMessages.get(commandName) + "\n";
    else
      return ("-jshell: " + commandName + ": command not found\n");
  }

}
