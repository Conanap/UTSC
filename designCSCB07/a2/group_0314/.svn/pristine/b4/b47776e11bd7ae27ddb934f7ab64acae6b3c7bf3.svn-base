import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class TokenizerTest {
  @Test
  public void testEmptyInput() {
    String input = "";
    String[] expectedOutput = {};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testSingleCommand() {
    String input = "cmd";
    String[] expectedOutput = {"cmd"};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testommandWithSurroundingSpaces() {
    String input = "  cmd  ";
    String[] expectedOutput = {"cmd"};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testCommandWithArguments() {
    String input = "cmd arg1 arg2";
    String[] expectedOutput = {"cmd", "arg1", "arg2"};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testCommandWithQuotedArgument() {
    String input = "cmd \"argument\"";
    String[] expectedOutput = {"cmd", "argument"};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testCommandWithQuotedArgumentWithSpaces() {
    String input = "cmd \"argument with spaces\"";
    String[] expectedOutput = {"cmd", "argument with spaces"};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testCommandWithMixedQuotedUnquotedArguments() {
    String input = "cmd \"quoted arguments\" unquoted argument \"quoted\"";
    String[] expectedOutput =
        {"cmd", "quoted arguments", "unquoted", "argument", "quoted"};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testWhitespaceOnlyInput() {
    String input = " ";
    String[] expectedOutput = {};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testQuotedWhitespaceInput() {
    String input = "\" \"";
    String[] expectedOutput = {" "};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testCommandWithQuotedEmptyString() {
    String input = "cmd \"\"";
    String[] expectedOutput = {"cmd", ""};
    assertArrayEquals(expectedOutput, Tokenizer.tokenizeInput(input));
  }

  @Test
  public void testParseFilePathRoot() {
    String[] out = Tokenizer.parseFilePath(".");
    String[] expect = {".", null};
    assertArrayEquals(expect, out);
  }

  @Test
  public void testParseFilePathRandomLongPath() {
    String[] out = Tokenizer.parseFilePath("a/b/c/d");
    String[] expect = {"a/b/c", "d"};
    assertArrayEquals(expect, out);
  }
}
