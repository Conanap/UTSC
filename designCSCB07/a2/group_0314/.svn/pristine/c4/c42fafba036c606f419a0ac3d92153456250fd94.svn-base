public class RunCmd {
	private static Directory curr = new Directory();

    public static String runCmd(String[] tokens, Directory current, FileSystem fs) {
	    String out = "";
	    int status = 1;
    	Directory temp;

	    if (!Validator.validateTokens(tokens))
	      return tokens.length > 0 ? Man.getUsage(tokens[0]) : "";
	    else {
	      switch (tokens[0]) {
	        case "echo":
	          if (tokens.length == 2)
	            out = Echo.echo(tokens[1]);
	          else if (tokens.length == 4) {            
	            if (tokens[2].equals(">"))
	              status = Overwrite.overwrite(Echo.echo(tokens[1]), tokens[3], fs, current);
	            else
	              status = Append.append(Echo.echo(tokens[1]), tokens[3], fs, current);
	          }
	          if(status == 0)
	            out = "Path not found: " + FileSystem.parseFilePath(tokens[3])[0] + "\n";
	          else if(status == 2)
	            out = "Illegal file name: " + FileSystem.parseFilePath(tokens[3])[1] + "\n";
	          else if(status == 3)
	          	out = "Directory already exist: " + FileSystem.parseFilePath(tokens[3])[1] + "\n";
	          else if(status == 4)
	          	out = "File already exist: " + FileSystem.parseFilePath(tokens[3])[1] + "\n";
	          break;
	        case "mkdir":
	          int i = 1;
	          while (i < tokens.length && status != 0)
	          {
	            //temp = fs.getDirectory(tokens[i], current);
	            //if(temp != null)
	              //status = MkDir.mkdir(tokens[i], fs, temp);
	            //else
	            System.out.println(tokens[i]);
	              status = MkDir.mkdir(tokens[i], fs, current);
	            i++;
	          }
	          if(status == 0)
	            out += "Path not found: " + FileSystem.parseFilePath(tokens[(i != 1) ? --i : i])[0] + "\n";
	          if(status == 0)
	            out = "Path not found: " + FileSystem.parseFilePath(tokens[(i != 1) ? --i : i])[0] + "\n";
	          else if(status == 2)
	            out = "Illegal file name: " + FileSystem.parseFilePath(tokens[(i != 1) ? --i : i])[1] + "\n";
	          else if(status == 3)
	          	out = "Directory already exist: " + FileSystem.parseFilePath(tokens[(i != 1) ? --i : i])[1] + "\n";
	          else if(status == 4)
	          	out = "File already exist: " + FileSystem.parseFilePath(tokens[(i != 1) ? --i : i])[1] + "\n";	          break;
	        case "cd":
	          curr = Cd.changeDir(tokens[1], fs, current);
	          break;
	        case "ls":
	          if (tokens.length == 1)
	            out += Ls.listContents(current);
	          for (i = 1; i < tokens.length; i++)
	            out += Ls.listContents(tokens[i], fs, current);
	          break;
	        case "cat":
	          out = Cat.cat(tokens, fs, current);
	          break;
	        case "pushd":
	          Pushd.pushd(fs, current);
	          break;
	        case "popd":
	          Popd.popd(fs, current);
	          break;
	        case "history":
	          if (tokens.length > 1) {
	            out += History.getHistory(Integer.parseInt(tokens[1]));
	          } else {
	            out += History.getHistory();
	          }
	          break;
	        case "man":
	          out = Man.getDocumentation(tokens[1]);
	          break;
	        case "pwd":
	          out = Pwd.printWorkingDirectory(current);
	          break;
	        default:
	          if(tokens.length > 0)
	          	out = "-jshell: " + tokens[0] + ": command not found\n";
	          break;
	      }
	    }
	    return out;
	}

	public static Directory getCurrDir() {
		return curr;
	}
}